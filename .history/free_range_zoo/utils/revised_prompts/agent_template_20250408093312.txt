def single_agent_policy(
    # Agent's own state
    agent_pos: Tuple[int, int],
    agent_fire_power: int,
    agent_has_suppressant: bool,
    
    # Other agents' states
    other_agents_pos: List[Tuple[int, int]],
    other_agents_fire_power: List[int],
    other_agents_suppressant: List[bool],
    
    # Task information
    task_positions: List[Tuple[int, int]],
    task_fire_levels: List[int],
    task_intensities: List[int]
) -> int:
    """
    Determines the best action for an agent in the wildfire environment.
    
    Args:
        agent_pos: Position of this agent (x, y)
        agent_fire_power: Fire suppression power of this agent
        agent_has_suppressant: Whether this agent has suppressant available
        
        other_agents_pos: Positions of all other agents [(x1, y1), (x2, y2), ...]
        other_agents_fire_power: Fire suppression power of all other agents
        other_agents_suppressant: Suppressant availability status of all other agents
        
        task_positions: Positions of all fire tasks [(x1, y1), (x2, y2), ...]
        task_fire_levels: Current fire level of each task
        task_intensities: Intensity (difficulty) of each task
    
    Returns:
        int: Index of the chosen task to address (0 to num_tasks-1)
    """
    
    pass

class WildfireAgent(Agent):
    def single_agent_act()
    def act(self, action_space: free_range_rust.Space) -> List[List[int]]:
        return self.actions
