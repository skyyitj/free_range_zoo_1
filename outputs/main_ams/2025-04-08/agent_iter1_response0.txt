/home/liuchi/miniconda3/envs/zymatch/lib/python3.12/site-packages/torch/nested/__init__.py:109: UserWarning: The PyTorch API of nested tensors is in prototype stage and will change in the near future. We recommend specifying layout=torch.jagged when constructing a nested tensor, as this layout receives active development, has better operator coverage, and works with torch.compile. (Triggered internally at /pytorch/aten/src/ATen/NestedTensorImpl.cpp:178.)
  return torch._nested_tensor_from_tensor_list(ts, dtype, None, device, None)
3
3
3
fires shape: torch.Size([1, 2, 3])
argmax_store shape: torch.Size([1, 2, 3])
fires shape: torch.Size([1, 2, 3])
argmax_store shape: torch.Size([1, 2, 3])
fires shape: torch.Size([1, 2, 3])
argmax_store shape: torch.Size([1, 2, 3])
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([2, 3])
Fire point 0: x=1, y=0
Fire point 1: x=1, y=2
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([2, 3])
Fire point 0: x=1, y=0
Fire point 1: x=1, y=2
maximum_index: 0
self.actions[batch] after update: tensor([0, 0], dtype=torch.int32)
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[0, 0]], dtype=torch.int32)
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([2, 3])
Fire point 0: x=1, y=0
Fire point 1: x=1, y=2
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)
fires shape: torch.Size([1, 2, 3])
argmax_store shape: torch.Size([1, 2, 3])
fires shape: torch.Size([1, 2, 3])
argmax_store shape: torch.Size([1, 2, 3])
fires shape: torch.Size([1, 2, 3])
argmax_store shape: torch.Size([1, 2, 3])
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([2, 3])
Fire point 0: x=1, y=0
Fire point 1: x=1, y=2
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([2, 3])
Fire point 0: x=1, y=0
Fire point 1: x=1, y=2
maximum_index: 0
self.actions[batch] after update: tensor([0, 0], dtype=torch.int32)
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[0, 0]], dtype=torch.int32)
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([2, 3])
Fire point 0: x=1, y=0
Fire point 1: x=1, y=2
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)
fires shape: torch.Size([1, 3, 3])
argmax_store shape: torch.Size([1, 3, 3])
fires shape: torch.Size([1, 3, 3])
argmax_store shape: torch.Size([1, 3, 3])
fires shape: torch.Size([1, 3, 3])
argmax_store shape: torch.Size([1, 3, 3])
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([3, 3])
Fire point 0: x=1, y=0
Fire point 1: x=2, y=0
Fire point 2: x=1, y=2
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([3, 3])
Fire point 0: x=1, y=0
Fire point 1: x=2, y=0
Fire point 2: x=1, y=2
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([3, 3])
Fire point 0: x=1, y=0
Fire point 1: x=2, y=0
Fire point 2: x=1, y=2
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)

Step 3 rewards:
Agent firefighter_1 ,total reward: tensor([-1.])
Agent firefighter_2 ,total reward: tensor([-1.])
Agent firefighter_3 ,total reward: tensor([-1.])
fires shape: torch.Size([1, 2, 3])
argmax_store shape: torch.Size([1, 2, 3])
fires shape: torch.Size([1, 2, 3])
argmax_store shape: torch.Size([1, 2, 3])
fires shape: torch.Size([1, 2, 3])
argmax_store shape: torch.Size([1, 2, 3])
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([2, 3])
Fire point 0: x=1, y=0
Fire point 1: x=2, y=0
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([2, 3])
Fire point 0: x=1, y=0
Fire point 1: x=2, y=0
maximum_index: 0
self.actions[batch] after update: tensor([0, 0], dtype=torch.int32)
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[0, 0]], dtype=torch.int32)
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([2, 3])
Fire point 0: x=1, y=0
Fire point 1: x=2, y=0
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)
fires shape: torch.Size([1, 1, 3])
argmax_store shape: torch.Size([1, 1, 3])
fires shape: torch.Size([1, 1, 3])
argmax_store shape: torch.Size([1, 1, 3])
fires shape: torch.Size([1, 1, 3])
argmax_store shape: torch.Size([1, 1, 3])
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([1, 3])
Fire point 0: x=2, y=0
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([1, 3])
Fire point 0: x=2, y=0
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([1, 3])
Fire point 0: x=2, y=0
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)
fires shape: torch.Size([1, 1, 3])
argmax_store shape: torch.Size([1, 1, 3])
fires shape: torch.Size([1, 1, 3])
argmax_store shape: torch.Size([1, 1, 3])
fires shape: torch.Size([1, 1, 3])
argmax_store shape: torch.Size([1, 1, 3])
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([1, 3])
Fire point 0: x=2, y=0
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([1, 3])
Fire point 0: x=2, y=0
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([1, 3])
Fire point 0: x=2, y=0
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)

Step 6 rewards:
Agent firefighter_1 ,total reward: tensor([-2.])
Agent firefighter_2 ,total reward: tensor([-2.])
Agent firefighter_3 ,total reward: tensor([-2.])
fires shape: torch.Size([1, 1, 3])
argmax_store shape: torch.Size([1, 1, 3])
fires shape: torch.Size([1, 1, 3])
argmax_store shape: torch.Size([1, 1, 3])
fires shape: torch.Size([1, 1, 3])
argmax_store shape: torch.Size([1, 1, 3])
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([1, 3])
Fire point 0: x=2, y=0
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([1, 3])
Fire point 0: x=2, y=0
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([1, 3])
Fire point 0: x=2, y=0
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)
fires shape: torch.Size([1, 1, 3])
argmax_store shape: torch.Size([1, 1, 3])
fires shape: torch.Size([1, 1, 3])
argmax_store shape: torch.Size([1, 1, 3])
fires shape: torch.Size([1, 1, 3])
argmax_store shape: torch.Size([1, 1, 3])
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([1, 3])
Fire point 0: x=2, y=0
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([1, 3])
Fire point 0: x=2, y=0
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([1, 3])
Fire point 0: x=2, y=0
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)
fires shape: torch.Size([1, 1, 3])
argmax_store shape: torch.Size([1, 1, 3])
fires shape: torch.Size([1, 1, 3])
argmax_store shape: torch.Size([1, 1, 3])
fires shape: torch.Size([1, 1, 3])
argmax_store shape: torch.Size([1, 1, 3])
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([1, 3])
Fire point 0: x=2, y=0
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([1, 3])
Fire point 0: x=2, y=0
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)
self.actions shape: torch.Size([1, 2])
self.observation['self'] shape: torch.Size([1, 4])
has_suppressant shape: torch.Size([1])
grid_width: 3, grid_height: 3
valid_action_space shape: torch.Size([3, 3])
argmax_store[batch] shape: torch.Size([1, 3])
Fire point 0: x=2, y=0
maximum_index: -1
self.actions final shape: torch.Size([1, 2])
self.actions final content: tensor([[-1, -1]], dtype=torch.int32)

Step 9 rewards:
Agent firefighter_1 ,total reward: tensor([-3.])
Agent firefighter_2 ,total reward: tensor([-3.])
Agent firefighter_3 ,total reward: tensor([-3.])

Final total rewards:
Agent firefighter_1 ,total reward: tensor([-3.])
Agent firefighter_2 ,total reward: tensor([-3.])
Agent firefighter_3 ,total reward: tensor([-3.])
ok!
