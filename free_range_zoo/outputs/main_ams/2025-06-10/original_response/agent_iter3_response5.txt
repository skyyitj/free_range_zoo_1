```python
import numpy as np
from typing import List, Tuple

def single_agent_policy(
    # === Agent Properties ===
    agent_pos: Tuple[float, float],              # Current position of the agent (y, x)
    agent_fire_reduction_power: float,           # How much fire the agent can reduce
    agent_suppressant_num: float,                # Amount of fire suppressant available

    # === Team Information ===
    other_agents_pos: List[Tuple[float, float]], # Positions of all other agents [(y1, x1), (y2, x2), ...]

    # === Fire Task Information ===
    fire_pos: List[Tuple[float, float]],         # Locations of all fires [(y1, x1), (y2, x2), ...]
    fire_levels: List[int],                      # Current intensity level of each fire
    fire_intensities: List[float],               # Current intensity value of each fire task

    # === Task Prioritization ===
    fire_putout_weight: List[float]              # Priority weights for fire suppression tasks
) -> int:
    """
    Choose the optimal fire-fighting task for a single agent.
    """
    num_tasks = len(fire_pos)
    
    # Utilize the existing variables and establish transformation temperatures
    distance_temperature = 0.5
    intensity_temperature = 2.0
    level_temperature = 1.0
    
    # Initialize storage for scores
    scores = np.zeros(num_tasks)
    
    # Iterate over all potential tasks
    for i in range(num_tasks):
        # Calculate distance from agent to each fire
        dist = np.sqrt((fire_pos[i][0] - agent_pos[0])**2 + (fire_pos[i][1] - agent_pos[1])**2)
        
        # Importance of extinguishing the fire based on external weights and fire level
        importance = fire_putout_weight[i] * np.exp(-fire_levels[i] / level_temperature)
        
        # Adjust the score with fire's current intensity
        intensity_factor = np.exp(-fire_intensities[i] / intensity_temperature)
        
        # Calculate and store score
        scores[i] = importance * intensity_factor / np.exp(dist / distance_temperature)
    
    # Select the task with the highest score
    selected_task_index = int(np.argmax(scores))
    
    return selected_task_index
```