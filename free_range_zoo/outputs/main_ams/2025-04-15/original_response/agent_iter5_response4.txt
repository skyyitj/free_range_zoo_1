Firstly, analyzing the metrics, we see that the Suppressant Efficiency is pretty high at 0.89 which is good because the agents are using the suppressants efficiently to extinguish the fire. However, the Used Suppressant is quite high, which suggests we could conserve the suppressant use more effectively.

The Average Putout Number is 1.9, meaning, on average, each agent was able to extinguish under two fires. The Burning Number is 3.91, which means, on average, about four fires were still burning. This suggests that we need to increase the Putout Number and reduce the Burning Number.

The Fire Intensity Change is -4.00, meaning, on average, the fire intensity was reduced by four units each step, which could be improved.

Also, the Average Steps is 9.9 suggesting that the agents are taking too much time to put out the fires. We need to reduce this number for more effectiveness.

To improve these metrics, firstly, let's try to increase the Putout Number and reduce the Burning Number by increasing the weight_temperature to 0.5 which gives more importance to the fire putout weights.

To reduce the Used Suppressant, let's increase the effect_temperature to 1.0 so the agents use the suppressants more judiciously. 

Additionally, to improve the fire intensity change, let's give importance to the maximum intensity fire out of all the fires by reducing the intensity_temperature to 1.0.

Here's the improved function following these considerations:

```python
from scipy.spatial.distance import cdist
import numpy as np

def single_agent_policy(
    agent_pos: Tuple[float, float],
    agent_fire_reduction_power: float, 
    agent_suppressant_num: float,  

    other_agents_pos: List[Tuple[float, float]], 

    fire_pos: List[Tuple[float, float]],         
    fire_levels: List[int],                     
    fire_intensities: List[float],               

    fire_putout_weight: List[float],
) -> int:

    num_tasks = len(fire_pos)
    scores = []
    
    dist_temperature = 0.3
    level_temperature = 4.0
    intensity_temperature = 1.0
    weight_temperature = 0.5
    effect_temperature = 1.0
    agent_distribution_temperature = 0.3
    
    # Calculate the distribution of agents
    agent_distribution = [(cdist([agent_pos], fire_pos).argmin()) for agent_pos in other_agents_pos]
    
    for i in range(num_tasks):
        # Calculate Euclidean distance from agent position to fire position
        dist = np.linalg.norm(np.array(agent_pos) - np.array(fire_pos[i]))
        
        # Effect of agent's fire suppression on a particular fire
        effect = agent_suppressant_num * agent_fire_reduction_power / 
                  max(fire_intensities[i], 1)
        
        # Calculate score for each fire
        score = -np.exp(-dist / dist_temperature) \
                -np.exp(-fire_levels[i] / level_temperature) \
                -np.exp(-fire_intensities[i] / intensity_temperature) \
                +np.exp(fire_putout_weight[i] / weight_temperature) \
                +np.exp(effect / effect_temperature) \
                -np.exp(agent_distribution.count(i) / agent_distribution_temperature)
                
        scores.append(score)

    # Return the fire with the highest score
    return np.argmax(scores)
```
Here, the agents will prioritize the task with a higher weight and also prioritize fires with higher intensity. They will try to handle the maximum intensity fire first and then move to the lower intensity fires which helps in controlling the overall fire intensity and spread. Also, they will more wisely use the suppressant for more efficient performance.