```python
import numpy as np
from typing import List, Tuple
from scipy.spatial import distance

def single_agent_policy(
    # === Agent Properties ===
    agent_pos: Tuple[float, float],              # Position of the agent (y, x)
    agent_fire_reduction_power: float,           # Fire suppression power
    agent_suppressant_num: float,                # Fire suppressant resources

    # === Team Information ===
    other_agents_pos: List[Tuple[float, float]], # Positions of all other agents [(y1, x1), (y2, x2), ...]

    # === Fire Task Information ===
    fire_pos: List[Tuple[float, float]],         # Positions of all fires [(y1, x1), (y2, x2), ...]
    fire_levels: List[int],                          # Current intensity level of each fire
    fire_intensities: List[float],               # Current intensity value for each fire

    # === Task Prioritization ===
    fire_putout_weight: List[float],             # Priority weights for suppression tasks
) -> int:

    num_tasks = len(fire_levels)
    scores = np.zeros(num_tasks)

    can_put_out_fire = agent_suppressant_num * agent_fire_reduction_power

    # Temperatures
    distance_temperature = 0.25 # Increasing temperature to prioritize closer fires

    for task in range(num_tasks):

        # Calculate Euclidean distance between fire and agent
        fire_distance = distance.euclidean(agent_pos, fire_pos[task])

        # Adjusting the calculation of fire level weight.
        scores[task] = (
            fire_putout_weight[task] / (1 + np.exp(-fire_levels[task])) / (1 + fire_distance * distance_temperature)
        ) * agent_fire_reduction_power

    # Return task index with maximum score
    max_score_task = np.argmax(scores)
    return max_score_task
```
In this improved function, the initialization and temperature for fire_levels and fire_intensities are removed. Instead, the agent will prioritize fires based on their proximity and levels, dealing with nearer fires first to conserve suppressant resources and manage fires more efficiently. A logistic function is added to calculate fire level weights so that the agent could avoid choosing the fire with a very high level but instead will prioritize the fire with a medium level to achieve optimal efficiency.