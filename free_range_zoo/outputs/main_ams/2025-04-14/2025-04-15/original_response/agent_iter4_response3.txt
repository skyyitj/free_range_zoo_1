# Revised Policy Function 

Based on the evaluation results, let's modify the policy function to improve its performance. 

You will notice that the average 'Used Suppressant' is relatively high, while the 'Suppressant Efficiency' is below the desired level. This means that although the agents are using a lot of suppressants, they are not efficient at it.

Here is how we can improve it:

    1. Increase the 'temperature' of the 'intensity_temperature' component to give higher importance to fire intensity during decision making. 
    This will help agents to focus more on the fires with higher intensity, leading to better utilization of the resources. 
    2. Reduce the 'temperature' of the 'distance_temperature' component. 
    Although it's important for agents to extinguish the nearby fires, overemphasizing on the distance might distract agents from the fires with higher intensity. 
    3. We will also modify the scores calculation by using the minimum between the fire intensity and the amount of suppressant an agent can use to put out the fire.
    This will ensure that the agents are not wasting suppressants on fires that are about to extinguish. 

The modified policy function is as follows:

```-python
def single_agent_policy(
    agent_pos, agent_fire_reduction_power, agent_suppressant_num,
    other_agents_pos, fire_pos, fire_levels, fire_intensities, fire_putout_weight):

    num_tasks = len(fire_levels)
    scores = np.zeros(num_tasks)

    # Calculate the amount of fire an agent can put out
    can_put_out_fire = agent_suppressant_num * agent_fire_reduction_power

    # Adjusted temperature parameters
    level_temperature = 0.35
    intensity_temperature = 0.15
    distance_temperature = 0.01 

    for task in range(num_tasks):

        # get euclidean distance between fire and agent
        fire_distance = distance.euclidean(agent_pos, fire_pos[task])

        # calculate score for each task using fire intensity, suppressant number and distance
        scores[task] = (
            np.exp(-fire_levels[task] * level_temperature) +
            min(can_put_out_fire, fire_intensities[task]) * np.exp(-fire_intensities[task] * intensity_temperature)-
            fire_distance * np.exp(fire_distance * distance_temperature)
        ) * fire_putout_weight[task]

    # return the index of the task with the highest score
    return np.argmax(scores)
```

This modified function is expected to make the agents more efficient in using their suppressants and addressing the fires with high intensities.