```python
import numpy as np
from typing import List, Tuple
from scipy.spatial import distance

def single_agent_policy(
    # === Agent Properties ===
    agent_pos: Tuple[float, float],              # Current position of the agent (y, x)
    agent_fire_reduction_power: float,           # How much fire the agent can reduce
    agent_suppressant_num: float,                # Amount of fire suppressant available

    # === Team Information ===
    other_agents_pos: List[Tuple[float, float]], # Positions of all other agents [(y1, x1), (y2, x2), ...]

    # === Fire Task Information ===
    fire_pos: List[Tuple[float, float]],         # Locations of all fires [(y1, x1), (y2, x2), ...]
    fire_levels: List[int],                      # Current intensity level of each fire
    fire_intensities: List[float],               # Current intensity value of each fire task

    # === Task Prioritization ===
    fire_putout_weight: List[float],             # Priority weights for fire suppression tasks
) -> int:

    num_tasks = len(fire_levels)
    scores = np.zeros(num_tasks)

    can_put_out_fire = agent_suppressant_num * agent_fire_reduction_power

    # Temperatures
    level_temperature = 0.4 # Increased temperature to give more importance to the fire level
    intensity_temperature = 0.2 # Increased temperature to add more importance to fire intensity
    distance_temperature = 0.15 # Reduced temperature to give less importance to distance

    for task in range(num_tasks):

        # calculate the euclidean distance between fire and agent
        fire_distance = distance.euclidean(agent_pos, fire_pos[task])

        # scoring function based on the weight of the fire, distance to the fire
        # intensity of the fire and suppressants left with the agent
        scores[task] = (
            (fire_putout_weight[task] * np.exp(-fire_levels[task] / can_put_out_fire * level_temperature) +
            can_put_out_fire * np.exp(-fire_intensities[task] / can_put_out_fire * intensity_temperature) -
            fire_distance * np.exp(-fire_distance * distance_temperature)) / (fire_distance + 1) # Add normalization and reduce the influence of fire distance on the score
        )

    # Return task index with maximum score
    max_score_task = np.argmax(scores)
    return max_score_task
```
In this revised policy, it still allocates the nearest fire to the agent with high priority based on the distance, intensity of fire, and the available suppressants. The fire_putout_weight still helps decide which fire to extinguish first based on the calculated score. However, several enhancements have been made in the scoring mechanism:
- The temperature parameters have been adjusted to better balance the importance of each aspect considered by the scoring function.
- The fire levels and fire intensities have been given more importance by increasing their respective temperatures, as these are the most critical aspects.
- The function also considers the impact of the distance to the fire. But this impact has been lessened by reducing the distance_temperature, as the distance to the fire is less critical than its intensity and level.
- To reduce the impact of distance on scoring, a normalization strategy has been introduced, which gives less importance to the fire farther away and more importance to the fire closer.