Here is the revised policy function:

```python
import numpy as np
from typing import List, Tuple
from scipy.spatial import distance

def single_agent_policy(
    # === Agent Properties ===
    agent_pos: Tuple[float, float],               # Current position of the agent (y, x)
    agent_fire_reduction_power: float,            # How much fire the agent can reduce
    agent_suppressant_num: float,                 # Amount of fire suppressant available

    # === Team Information ===
    other_agents_pos: List[Tuple[float, float]],  # Positions of all other agents [(y1, x1), (y2, x2), ...]

    # === Fire Task Information ===
    fire_pos: List[Tuple[float, float]],          # Locations of all fires [(y1, x1), (y2, x2), ...]
    fire_levels: List[int],                       # Current intensity level of each fire
    fire_intensities: List[float],                # Current intensity value of each fire task

    # === Task Prioritization ===
    fire_putout_weight: List[float],              # Priority weights for fire suppression tasks
) -> int:

    num_tasks = len(fire_levels)
    scores = np.zeros(num_tasks)

    can_put_out_fire = agent_suppressant_num * agent_fire_reduction_power

    # Adjusted temperature parameters
    level_temperature = 0.40
    intensity_temperature = 0.10
    distance_temperature = 0.07 

    for task in range(num_tasks):
        # Increase the emphasis on fire_levels by increasing level_temperature
        # This is because the Average Fire Intensity Change is not high enough

        # get euclidean distance between fire and agent
        fire_distance = distance.euclidean(agent_pos, fire_pos[task])

        # calculate score for each task using fire intensity, level, and distance
        # all values are multiplied by suppressant_amount to penalize lower resources
        # 'fire_putout_weight' is directly applied as a multiplier to prioritize tasks
        scores[task] = (
            np.exp(-fire_levels[task] * level_temperature) +
            can_put_out_fire * np.exp(-fire_intensities[task] / can_put_out_fire * intensity_temperature) -
            fire_distance * np.exp(fire_distance * distance_temperature)
        ) * fire_putout_weight[task]

    # return the index of the task with the highest score
    max_score_task = np.argmax(scores)
    return max_score_task
```

This policy change enhances the focus on fires with higher levels, as it was seen in the evaluation feedback that the average fire intensity change was not very high. The aim is to improve agent efficiency in extinguishing fires with high intensity and levels. By supplying a higher level temperature, the agent will be encouraged to prioritize fires with higher levels.

All the other metrics are quite good. However, the Average Burnedout Number, which indicates the fires that have not been handled by the agents, is quite high. A lower value would be preferable. As a result, the level_temperature has been further tweaked to get better results and address more fires. So the overall changes to this policy were to increase the "level_temperature" to enhance the importance of the "fire_levels" in calculating the task scores.