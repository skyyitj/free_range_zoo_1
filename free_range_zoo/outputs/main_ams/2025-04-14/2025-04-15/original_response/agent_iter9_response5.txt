```python
import numpy as np
from typing import List, Tuple
from scipy.spatial import distance

def single_agent_policy(
    # === Agent Properties ===
    agent_pos: Tuple[float, float],              # Current position of the agent (y, x)
    agent_fire_reduction_power: float,           # How much fire the agent can reduce
    agent_suppressant_num: float,                # Amount of fire suppressant available

    # === Team Information ===
    other_agents_pos: List[Tuple[float, float]], # Positions of all other agents [(y1, x1), (y2, x2), ...]

    # === Fire Task Information ===
    fire_pos: List[Tuple[float, float]],         # Locations of all fires [(y1, x1), (y2, x2), ...]
    fire_levels: List[int],                      # Current intensity level of each fire
    fire_intensities: List[float],               # Current intensity value of each fire task

    # === Task Prioritization ===
    fire_putout_weight: List[float],             # Priority weights for fire suppression tasks
) -> int:
    
    num_tasks = len(fire_levels)
    scores = np.zeros(num_tasks)

    max_suppressant_capacity = agent_suppressant_num * agent_fire_reduction_power

    # Temperatures
    level_temperature = 0.25    # Previously was 0.35
    intensity_temperature = 0.3 # Previously was 0.2
    distance_temperature = 0.1  # Previously was 0.15 

    for task in range(num_tasks):
        # calculate the euclidean distance between fire and agent
        fire_distance = distance.euclidean(agent_pos, fire_pos[task])

        # scoring function based on the weight of the fire, distance to the fire,
        # intensity of the fire and suppressants left with the agent
        scores[task] = (
            fire_putout_weight[task] * np.exp(-fire_levels[task] / max_suppressant_capacity * level_temperature) +
            max_suppressant_capacity * np.exp(-fire_intensities[task] / max_suppressant_capacity * intensity_temperature) -
            fire_distance * distance_temperature  # Removed np.exp() from distance component
        )

    # Return task index with maximum score
    return np.argmax(scores)
```
In this revised policy, I have reduced the level_temperature and distance_temperature, so that the agent can put more focus on fires with higher levels and less influence on the distances to fires. I also increased the intensity_temperature to make the agent consider more on the intensity of the fire. The goal is to further improve the fire putout number, decrease the burnout number and improve the suppressant efficiency while trying to minimize the resource consumption as reflected by the used suppressant.