Here's the policy function:

```python
def single_agent_policy(
    # === Agent Properties ===
    agent_pos: Tuple[float, float],              # Current position of the agent (y, x)
    agent_fire_reduction_power: float,           # How much fire the agent can reduce
    agent_suppressant_num: float,                # Amount of fire suppressant available

    # === Team Information ===
    other_agents_pos: List[Tuple[float, float]], # Positions of all other agents [(y1, x1), (y2, x2), ...]

    # === Fire Task Information ===
    fire_pos: List[Tuple[float, float]],         # Locations of all fires [(y1, x1), (y2, x2), ...]
    fire_levels: List[int],                      # Current intensity level of each fire
    fire_intensities: List[float],               # Current intensity value of each fire task

    # === Task Prioritization ===
    fire_putout_weight: List[float],             # Priority weights for fire suppression tasks
) -> int:
    """
    Choose the optimal fire-fighting task for a single agent.

    Input Parameters:
        Agent Properties:
            agent_pos: (y, x) coordinates of the agent
            agent_fire_reduction_power: Fire suppression capability
            agent_suppressant_num: Available suppressant resources

        Team Information:
            other_agents_pos: List of (y, x) positions for all other agents
                            Shape: (num_agents-1, 2)

        Fire Information:
            fire_pos: List of (y, x) coordinates for all fires
                     Shape: (num_tasks, 2)
            fire_levels: Current fire intensity at each location
                        Shape: (num_tasks,)
            fire_intensities: Base difficulty of extinguishing each fire
                            Shape: (num_tasks,)

        Task Weights:
            fire_putout_weight: Priority weights for task selection
                               Shape: (num_tasks,)

    Returns:
        int: The index of the selected fire task (0 to num_tasks-1)
    """
    import numpy as np  # Assuming numpy is allowed, as it's a standard library
    
    # Temperature parameters for different score components
    distance_temp = 10.0
    fire_level_temp = 5.0
    fire_weight_temp = 2.0

    # Scoring system
    task_scores = []
    for task_idx in range(len(fire_pos)):
        # Distance factor: prioritize closer fires
        distance = np.linalg.norm(np.array(agent_pos) - np.array(fire_pos[task_idx]))
        normalized_distance = np.exp(-distance / distance_temp)

        # Fire level factor: prioritize higher-intensity fires
        normalized_fire_level = np.exp(fire_levels[task_idx] / fire_level_temp)

        # Reward weight factor: prioritize fires with high reward weight
        normalized_weight = np.exp(fire_putout_weight[task_idx] / fire_weight_temp)

        # Compute total score for the task (higher is better)
        score = normalized_distance * normalized_fire_level * normalized_weight
        task_scores.append(score)

    # Choose the task with the highest score
    best_task_idx = int(np.argmax(task_scores))
    return best_task_idx
```

### Explanation:
1. **Distance Component**:
   - Prioritize fires closer to the agent using an exponentially decaying factor based on Euclidean distance.
   
2. **Fire Level Component**:
   - Factor in the intensity levels of fires to prioritize more critical situations. The exponential scaling ensures higher intensity fires are weighted more heavily.

3. **Reward Weight Component**:
   - Account for the reward weight associated with each fire task, scaling it to prioritize tasks with higher rewards.

4. **Score Calculation**:
   - Combine the normalized distance, fire level, and reward weight components multiplicatively to compute the score for each task.

5. **Temperature Parameters**:
   - Distance, fire level, and weight components have their temperature parameters (`distance_temp`, `fire_level_temp`, `fire_weight_temp`) to control weighting for prioritization. These parameters can be fine-tuned depending on the simulation environment.

6. **Task Selection**:
   - The `np.argmax` function selects the task with the highest score, ensuring the agent is assigned to the optimal fire-fighting task.

This policy balances the trade-offs between fire urgency, agent proximity, and reward incentives to ensure efficient multi-agent coordination during wildfire suppression.