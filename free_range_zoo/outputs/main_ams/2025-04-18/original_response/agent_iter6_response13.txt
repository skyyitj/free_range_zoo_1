```python
def single_agent_policy(
    agent_pos: Tuple[float, float], 
    agent_fire_reduction_power: float, 
    agent_suppressant_num: float, 

    other_agents_pos: List[Tuple[float, float]], 

    fire_pos: List[Tuple[float, float]], 
    fire_levels: List[int], 
    fire_intensities: List[float], 

    fire_putout_weight: List[float]
) -> int:

    # === Scoring Fire Tasks ===
    max_score = -float('inf')
    best_fire = None
    temperature = 0.03  # Lower temperature value to amplify the impact

    for i, (fire_position, fire_level, fire_intensity, fire_weight) in enumerate(zip(fire_pos, fire_levels, fire_intensities, fire_putout_weight)):

        # Distance factor
        dist = ((fire_position[0]-agent_pos[0])**2 + (fire_position[1]-agent_pos[1])**2)**0.5 / (agent_suppressant_num+1)

        # Firefighting efficiency factor
        suppression_power = agent_fire_reduction_power * agent_suppressant_num / (fire_intensity + 1)

        # Fire score calculation considering prioritization weight, firefighting efficiency, and distance factor
        # Fire level influences suppression power and increases the score to avoid the fire burning out due to constant high fire level
        score = np.exp((fire_weight * suppression_power / (dist + 1) + 1.2*fire_level) / temperature)

        if score > max_score:
            max_score = score
            best_fire = i

    return best_fire
```
Again, we have revised the policy. The temperature value has been further decreased to amplify the impact of differences in task scores. Furthermore, the influence of fire_level on the score has been enhanced, which can encourage the agent to handle fires with higher levels more actively to prevent them from burning out.