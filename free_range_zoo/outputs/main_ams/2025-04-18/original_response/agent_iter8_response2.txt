```python
def single_agent_policy(
    agent_pos: Tuple[float, float], 
    agent_fire_reduction_power: float, 
    agent_suppressant_num: float, 

    other_agents_pos: List[Tuple[float, float]], 

    fire_pos: List[Tuple[float, float]], 
    fire_levels: List[int], 
    fire_intensities: List[float], 

    fire_putout_weight: List[float]
) -> int:

    # === Adjusting Scoring Criteria ===
    max_score = -float('inf')
    best_fire = None

    dist_temperature = 0.1  # Adjust temperature coefficient to balance distance factor
    suppress_power_temperature = 0.01  # Adjust temperature coefficient to balance suppression power factor
    fire_level_temperature = 0.1  # Adjust temperature coefficient to balance fire level factor
    fire_intensity_temperature = 0.02 # Adjust temperature coefficient to balance fire intensity factor

    for i, (fire_position, fire_level, fire_intensity, fire_weight) in enumerate(zip(fire_pos, fire_levels, fire_intensities, fire_putout_weight)):

        # Distance factor with higher weight
        dist = ((fire_position[0]-agent_pos[0])**2 + (fire_position[1]-agent_pos[1])**2)**0.5 / (agent_suppressant_num+1)

        # Firefighting efficiency factor with moderate weight
        suppression_power = agent_fire_reduction_power * agent_suppressant_num / (fire_intensity+1)

        # Fire Intensity factor with moderate weight
        fire_intensity_score = fire_intensity / (fire_level_temperature * fire_level + 1)

        # Score calculation considering prioritization weight, firefighting efficiency, distance factor, fire level & intensity.
        score = np.exp((fire_weight * suppression_power / (dist_temperature * dist + 1) + fire_level * fire_level_temperature + fire_intensity_score) / suppress_power_temperature)

        if score > max_score:
            max_score = score
            best_fire = i

    return best_fire
```

In this new policy, we increase the fire level temperature to force the agent to prioritize fires with a higher intensity level. We decrease the suppression power temperature, enabling the agent to make decisions that conserve more resources. This is especially crucial when the agent's suppressant resources are running low.

We have also added an extra component into the score calculation - fire_intensity_temperature. This will allow the agent to consider the fire intensity in its decision, therefore forcing the agent to prioritize fires with higher intensity.