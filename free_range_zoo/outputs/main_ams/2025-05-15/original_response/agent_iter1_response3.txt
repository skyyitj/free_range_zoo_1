```python
import numpy as np

def single_agent_policy(
    # === Agent Properties ===
    agent_pos: Tuple[float, float],              # Current position of the agent (y, x)
    agent_fire_reduction_power: float,           # How much fire the agent can reduce
    agent_suppressant_num: float,                # Amount of fire suppressant available

    # === Team Information ===
    other_agents_pos: List[Tuple[float, float]], # Positions of all other agents [(y1, x1), (y2, x2), ...]

    # === Fire Task Information ===
    fire_pos: List[Tuple[float, float]],         # Locations of all fires [(y1, x1), (y2, x2), ...]
    fire_levels: List[int],                      # Current intensity level of each fire
    fire_intensities: List[float],               # Current intensity value of each fire task

    # === Task Prioritization ===
    fire_putout_weight: List[float],             # Priority weights for fire suppression tasks
) -> int:
    """
    Choose the optimal fire-fighting task for a single agent.
    """
    num_tasks = len(fire_pos)
    best_task_score = float('-inf')
    selected_task_index = -1

    # Increase the decision influence of distance and intensity by adjusting normalization temperatures
    distance_normalization_temp = 0.25  # Higher value to make distance more impactful
    intensity_normalization_temp = 0.1  # Higher value to make fire intensity more impactful

    for i in range(num_tasks):
        distance = np.sqrt((agent_pos[0] - fire_pos[i][0])**2 + (agent_pos[1] - fire_pos[i][1])**2)
        norm_distance = np.exp(-distance_normalization_temp * distance)

        intensity = fire_levels[i] * fire_intensities[i]
        norm_intensity = np.exp(-intensity_normalization_temp * intensity)

        effective_suppressant = min(agent_suppressant_num, agent_fire_reduction_power * intensity)
        suppressant_efficiency = effective_suppressant / (1.0 + intensity)

        score = fire_putout_weight[i] * suppressant_efficiency * norm_distance * norm_intensity

        # Compare score to find the best task
        if score > best_task_score:
            best_task_score = score
            selected_task_index = i

    return selected_task_index
```
This updated version of the policy function adds greater influence to the agent's distance to fire and the fire intensity, which will help prioritize closer and more intense fires, potentially leading to better resource utilization and overall suppression efficiency.