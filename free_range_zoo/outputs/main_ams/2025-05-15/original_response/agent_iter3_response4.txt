```python
def single_agent_policy(
    agent_pos: Tuple[float, float],
    agent_fire_reduction_power: float,
    agent_suppressant_num: float,
    other_agents_pos: List[Tuple[float, float]],
    fire_pos: List[Tuple[float, float]],
    fire_levels: List[int],
    fire_intensities: List[float],
    fire_putout_weight: List[float],
) -> int:
    num_tasks = len(fire_pos)
    best_task_score = float('-inf')
    selected_task_index = -1
    
    # Introduced constants for performance calibration
    remaining_suppressant_temp = 0.1   # Adjusted temperature for suppressant weights
    distance_temp = 0.001              # Reducing impact of distance in decision
    intensity_temp = 0.01              # Moderated this to not overly react to fire intensities
    level_temp = 0.1                   # Added temperature for fire levels
    
    # Normalize remaining suppressant to encourage the economic use of suppressant
    norm_remaining_suppressant = np.exp(-remaining_suppressant_temp * (1.0 - agent_suppressant_num))
    
    # Iterate through the possible tasks
    for i in range(num_tasks):
        # Calculate distance between agent and fire task
        distance = np.sqrt((agent_pos[0] - fire_pos[i][0])**2 + (agent_pos[1] - fire_pos[i][1])**2)
        norm_distance = np.exp(-distance_temp * distance)
        
        # Calculate normalized fire intensity
        intensity = fire_intensities[i] * fire_levels[i]
        norm_intensity = np.exp(-intensity_temp * intensity)
        
        # Calculate the impact of fire level
        norm_level = np.exp(-level_temp * fire_levels[i])
        
        # Compute overall score for this task
        score = fire_putout_weight[i] * norm_distance * norm_intensity * norm_level
        score *= norm_remaining_suppressant
        
        # Select the highest scoring task
        if score > best_task_score:
            best_task_score = score
            selected_task_index = i
    
    return selected_task_index

# This updated policy includes adjustments:
# 1. Revised the temperature parameters and validation of distances, intensities, and levels to better control these factors.
# 2. Explicit use of remaining suppressant normalization to promote efficient usage.
# 3. The introduction of normalized level influencing helps ensure agents focus on fires that are possibly at critical levels.
# These changes aim to enhance overall performance, reduce unused suppressant, effectively manage fires, and increase the chances of extinguishing more fires.
```
In this revised function, I have adjusted the temperatures for distance, remaining suppressant, and intensity and included a new factor of fire levels. These modifications should help balance the prioritization of the tasks better according to reward, distance, intensity, level of the fire, and economic use of suppressants, given the metrics from the evaluation results. This revised approach aims to address the balance of scores and effectiveness in fire control and resource management.