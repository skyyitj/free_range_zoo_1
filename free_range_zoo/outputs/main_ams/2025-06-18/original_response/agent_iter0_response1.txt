```python
def single_agent_policy(
    # === Agent Properties ===
    agent_pos: Tuple[float, float],              # Current position of the agent (y, x)
    agent_fire_reduction_power: float,           # How much fire the agent can reduce
    agent_suppressant_num: float,                # Amount of fire suppressant available

    # === Team Information ===
    other_agents_pos: List[Tuple[float, float]], # Positions of all other agents [(y1, x1), (y2, x2), ...]

    # === Fire Task Information ===
    fire_pos: List[Tuple[float, float]],         # Locations of all fires [(y1, x1), (y2, x2), ...]
    fire_levels: List[int],                      # Current intensity level of each fire
    fire_intensities: List[float],               # Current intensity value of each fire task

    # === Task Prioritization ===
    fire_putout_weight: List[float],             # Priority weights for fire suppression tasks
) -> int:
    """
    Choose the optimal fire-fighting task for a single agent.

    Input Parameters:
        Agent Properties:
            agent_pos: (y, x) coordinates of the agent
            agent_fire_reduction_power: Fire suppression capability
            agent_suppressant_num: Available suppressant resources

        Team Information:
            other_agents_pos: List of (y, x) positions for all other agents
                            Shape: (num_agents-1, 2)

        Fire Information:
            fire_pos: List of (y, x) coordinates for all fires
                     Shape: (num_tasks, 2)
            fire_levels: Current fire intensity at each location
                        Shape: (num_tasks,)
            fire_intensities: Base difficulty of extinguishing each fire
                            Shape: (num_tasks,)

        Task Weights:
            fire_putout_weight: Priority weights for task selection
                               Shape: (num_tasks,)

    Returns:
        int: The index of the selected fire task (0 to num_tasks-1)
    """
    import numpy as np

    # Initialize task priority score list
    task_scores = []

    # Temperature parameters for score components
    intensity_temp = 1.0
    suppressant_temp = 0.5
    priority_weight_temp = 1.5
    distance_temp = 2.0

    # Loop through each fire task to compute its score
    for i in range(len(fire_pos)):
        # Distance score: prioritize closer fires over farther ones
        distance = np.linalg.norm(np.array(agent_pos) - np.array(fire_pos[i]))
        distance_score = np.exp(-distance / distance_temp)

        # Fire intensity score: prioritize higher intensity fires
        fire_intensity_score = np.exp(fire_intensities[i] / intensity_temp)

        # Resource impact score: consider how much the agent can reduce the fire
        remaining_suppressant = agent_suppressant_num
        potential_reduction = agent_fire_reduction_power * remaining_suppressant
        resource_impact_score = np.exp(potential_reduction / suppressant_temp)

        # Priority weight contribution: factor in task importance
        weight_score = np.exp(fire_putout_weight[i] / priority_weight_temp)

        # Compute overall score for the task
        total_score = distance_score * fire_intensity_score * resource_impact_score * weight_score

        # Store the score
        task_scores.append(total_score)

    # Choose the task with the highest score
    best_task_index = np.argmax(task_scores)
    return best_task_index
```