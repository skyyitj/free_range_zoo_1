```python
def single_agent_policy(
    agent_pos,
    agent_fire_reduction_power,
    agent_suppressant_num,
    other_agents_pos,
    fire_pos,
    fire_levels,
    fire_intensities,
    fire_putout_weight
):
    import numpy as np

    # Calculate distances of the agent to each fire
    distances = [
        np.sqrt((f_pos[0] - agent_pos[0]) ** 2 + (f_pos[1] - agent_pos[1]) ** 2)
        for f_pos in fire_pos
    ]

    # Normalize distances to prioritize nearby fires
    distance_temperature = 0.01
    normalized_distances = 1 / (np.array(distances) + 0.001)  # Add a small value to avoid division by zero
    normalized_distances = np.exp(-normalized_distances / distance_temperature)

    # Calculate potential suppressant effect on each fire
    suppressant_capacity_scale = 5.0
    potential_fire_reductions = agent_suppressant_num * agent_fire_reduction_power / (np.array(fire_intensities) + 0.001)
    potential_fire_reductions *= suppressant_capacity_scale

    # Estimate new fire levels after suppression attempts
    new_fire_levels = np.array(fire_levels) - potential_fire_reductions

    # Normalize the suppression effect; fires expected to go out are highly valuable
    new_intensity_temperature = 1.0
    fire_suppression_effectiveness = np.exp(-new_fire_levels / new_intensity_temperature)
    
    # Calculate urgency based on current fire levels and intensity difficulty
    fire_desperation = np.array(fire_intensities) * np.array(fire_levels)
    desperation_temperature = max(fire_desperation) / 10
    normalized_desperation = np.exp(-fire_desperation / desperation_temperature)

    # Weighing all the factors to compute the score for each fire
    scores = normalized_distances * np.array(fire_putout_weight) * fire_suppression_effectiveness * normalized_desperation
    
    # Select the best task by the highest score
    task_selection_temperature = 5.0
    softmax_scores = np.exp(scores / task_selection_temperature)
    probabilities = softmax_scores / np.sum(softmax_scores)
    selected_task_index = np.random.choice(len(scores), p=probabilities)

    return selected_task_index
```