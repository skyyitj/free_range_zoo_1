```python
def single_agent_policy(
    agent_pos,
    agent_fire_reduction_power,
    agent_suppressant_num,
    other_agents_pos,
    fire_pos,
    fire_levels,
    fire_intensities,
    fire_putout_weight
):
    import numpy as np

    num_tasks = len(fire_pos)
    
    # Normalize distances to prioritize nearby fires with a more aggressive factor to penalize distance
    distances = np.array([
        np.sqrt((f_pos[0] - agent_pos[0]) ** 2 + (f_pos[1] - agent_pos[1]) ** 2)
        for f_pos in fire_pos
    ])
    
    distance_temperature = 0.1
    normalized_distances = np.exp(-distances * distance_temperature)
    
    # Compute how much each agent can reduce the fire intensity
    potential_fire_reduction = agent_suppressant_num * agent_fire_reduction_power

    # Normalize expected fire intensity after agent acts
    estimated_fire_levels_after = np.clip(np.array(fire_levels) - potential_fire_reduction / np.array(fire_intensities), a_min=0, a_max=None)
    
    fire_level_reduction_temperature = 1.0
    normalized_fire_level_reductions = np.exp(-estimated_fire_levels_after * fire_level_reduction_temperature)
    
    # Calculate priority of each fire based on given weights and potential suppression effectiveness
    weighted_task_priority = np.array(fire_putout_weight) * normalized_fire_level_reductions
    
    # Combine weighted priority with proximity
    score = weighted_task_priority * normalized_distances
    
    # Select task with the highest score (modified score calculation to put more weight on fire reduction)
    selected_task_index = np.argmax(score)
    
    return selected_task_index
```

This revised `single_agent_policy` function implements a couple of nuanced adjustments to enhance fire suppression strategy:
1. **Distance Influence**: Enhances the weighting of proximity to fires by applying a more aggressive exponential decay based on distance.
2. **Fire Level Reduction**: Implements a direct consideration for how much the fire level is expected to be reduced after the agent's action, using an exponent to amplify differences in effectiveness.
3. **Task Weighting**: Combines the effectiveness of fire suppression with the given priority weights and the normalized distances to determine the best target.
4. **Optimized Score Calculation**: The score calculation melds multiple heuristics, placing significant emphasis both on effectively reducing the fire and tackling nearer, high-priority fires.