```python
def single_agent_policy(
    agent_pos: Tuple[float, float], 
    agent_fire_reduction_power: float,
    agent_supressant_num: float, 
    other_agents_pos: List[Tuple[float, float]], 
    fire_pos: List[Tuple[float, float]], 
    fire_levels: List[int], 
    fire_intensities: List[float],
    fire_putout_weight: List[float]
) -> int:
    num_tasks = len(fire_pos)
    best_task_index = -1
    highest_score = float('-inf')

    # Adjust temperature for re-evaluation
    distance_temp = 2.0  # Reduced to make a less steep contrast on distances
    effectiveness_temp = 0.05  # Reduced to emphasize even small effectiveness gains
    importance_temp = 0.2  # Reduced to emphasize the importance weights more strongly

    for task_index in range(num_tasks):
        fire = fire_pos[task_index]
        fire_level = fire_levels[task_index]
        fire_intensity = fire_intensities[task_index]
        
        distance = np.sqrt((agent_pos[0] - fire[0])**2 + (agent_pos[1] - fire[1])**2)
        
        # Evaluate possible effective actions before calculating potential effectiveness
        if fire_intensity <= 0:
            continue  # Skip extinguished fires
        
        # Ensure the agent has enough suppressant to act
        possible_suppressant_use = min(agent_supressant_num, fire_intensity / agent_fire_reduction_power)
        if possible_supressant_use < 1.0: 
            continue

        potential_effectiveness = agent_fire_reduction_power * possible_suppressant_use

        importance_weight = fire_putout_weight[task_index]

        # Refined scoring to balance the importance, distance, and effectiveness
        task_score = (
            np.log1p(importance_weight / importance_temp) * 5.0 - 
            np.log1p(distance / distance_temp) * 2.0 +
            np.log1p(potential_effectiveness / effectiveness_temp) * 3.0
        )

        if task_score > highest_score:
            highest_score = task_score
            best_task_index = task_index

    return best_task_index
```

This revised policy function gives more significant weight to the importance of the fire and its potential effectiveness. The suppressant calculations were refined to ensure that only feasible actions are scored. Adjustments to temperature values make the prioritization between task variables more balanced, potentially leading to improved resource usage and overall performance metrics.