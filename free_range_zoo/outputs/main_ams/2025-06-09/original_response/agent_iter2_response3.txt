```python
import numpy as np

def single_agent_policy(
    agent_pos: Tuple[float, float], 
    agent_fire_reduction_power: float,
    agent_supressant_num: float, 
    other_agents_pos: List[Tuple[float, float]], 
    fire_pos: List[Tuple[float, float]], 
    fire_levels: List[int], 
    fire_intensities: List[float],
    fire_putout_weight: List[float]
) -> int:
    
    num_tasks = len(fire_pos)
    best_task_index = -1
    highest_score = float('-inf')

    # Analyzing the need to focus on closest and highest weight fires when resources are limited
    suppressant_efficiency_temp = 2.0  # Increasing emphasis on using suppressant efficiently
    distance_temp = 1.0  # Decrease distance normalization factor to put more focus on nearby fires
    importance_temp = 0.5  # Increase sensitivity to the importance of the fire

    for task_index in range(num_tasks):
        # Fire task information
        fire = fire_pos[task_index]
        fire_level = fire_levels[task_index]
        fire_intensity = fire_intensities[task_index]
        importance_weight = fire_putout_weight[task_index]

        # Distance to the fire task
        distance = np.sqrt((agent_pos[0] - fire[0])**2 + (agent_pos[1] - fire[1])**2)

        # Calculate possible suppression considering fire intensity and agent capabilities
        possible_suppressant_use = min(agent_supressant_num, fire_intensity / agent_fire_reduction_power)
        potential_effectiveness = agent_fire_reduction_power * possible_suppressant_use

        # Score calculation considering location importance, suppression capabilities and distance
        task_score = (
            np.exp(importance_weight / importance_temp) *  # prioritize higher weight tasks more aggressively
            np.exp(potential_effectiveness / suppressant_efficiency_temp) /  # maximize effectiveness
            (np.log1p(distance) / distance_temp)  # minimize distance but with less extreme penalization
        )
        
        # Determine the best task index with the highest score
        if task_score > highest_score:
            highest_score = task_score
            best_task_index = task_index

    return best_task_index
```

This revised policy function aims to better balance between:
- Prioritizing high-weight, important fire suppression tasks.
- Focusing on nearby fires to reduce travel time.
- Maximizing the efficient use of suppressants to achieve higher suppressant efficiency.

By refining temperature parameters and tailoring the score calculation formula, the revised function attempts to optimize resources and strategic firefighting actions based on the evaluations and objectives described.