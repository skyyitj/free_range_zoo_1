"""This script reads documentation from /free_range_zoo and puts it into md files inside the docs/ directory."""

import sys

sys.path.append('..')

import os
import re
import importlib
import inspect

from free_range_zoo.utils.all_modules import all_environments


def _add_frontmatter(text, frontmatter_options):
    frontmatter_text = "---\nautogenerated: true"
    for key, value in frontmatter_options.items():
        frontmatter_text += f"\n{key}: {value}"
    frontmatter_text += "\n---\n\n"
    return frontmatter_text + text


def _create_docs_md(file_path, text, frontmatter_options):
    text = _add_frontmatter(text, frontmatter_options)
    with open(file_path, "w", encoding="utf-8") as file:
        file.write(text)


def _get_docs_from_py(file_path):
    file_path = os.path.join('/'.join(file_path.split('/')[:-1]), "env", file_path.split('/')[-1])

    with open(file_path, encoding="utf-8") as fp:
        text = fp.read()
        regex = re.compile(r'^r?"""\s*((\n|.)*?)("""\s*\n)', re.MULTILINE)
        match = regex.search(text)
        if match:
            return match.group(1)
        else:
            return ""


def main():
    """Create environment markdown documentation files."""
    ignore_dirs = ["test", "utils", "configs", "config"]
    docs_dir = os.path.join(os.path.dirname(__file__), "..", "source")
    envs_dir = os.path.join(os.path.dirname(__file__), "..", "..", "free_range_zoo", "envs")

    for env_type in [""]:
        env_type_path = os.path.join(envs_dir, env_type)
        if not os.path.isdir(env_type_path) or env_type in ignore_dirs:
            continue
        envs_list = os.listdir(env_type_path)
        if "__pycache__" in envs_list:
            envs_list.remove("__pycache__")

        envs_list = list(
            filter(
                lambda x: (os.path.isdir(os.path.join(env_type_path, x)) and "utils" not in os.path.join(env_type_path, x) and x
                           not in ignore_dirs) or "rlcard_envs" in x,
                envs_list,
            ))

        for i, env_name in enumerate(envs_list):
            env_dir_path = os.path.join(env_type_path, env_name)

            frontmatter_options = {}

            # TODO: Add icons to the environment directories
            # Include the icon in the frontmatter
            # frontmatter_options = {"env_icon": f'"source/_static/img/{env_name}.png"'}

            if i == 0:
                frontmatter_options["firstpage"] = "cybersecurity"
            elif i == len(envs_list) - 1:
                frontmatter_options["lastpage"] = "wildfire"

            docs_text = _get_docs_from_py(
                os.path.join(env_dir_path, env_name + ".py") if "rlcard_envs" not in env_dir_path else env_dir_path + ".py")

            # Create full usage scripts for each environment page
            full_env_names = [full_name for full_name in all_environments.keys() if env_name in full_name]
            env_name_version = full_env_names[0].split("/")[1]

            # Create the AEC cycle usage example
            with open(f"{docs_dir}/code_examples/usage_aec.py") as f:
                usage = f.read()
            usage = usage.replace("space_invaders_v2", env_name_version)
            usage = usage.replace("atari", "free_range_zoo")
            usage = usage.replace("pettingzoo", "free_range_zoo")
            usage = usage.strip()

            # Create the parallel usage example
            with open(f"{docs_dir}/code_examples/usage_parallel.py") as f:
                usage_parallel = f.read()

            usage_parallel = usage_parallel.replace("space_invaders_v2", env_name_version)
            usage_parallel = usage_parallel.replace("atari", "free_range_zoo")
            usage_parallel = usage_parallel.replace("pettingzoo", "free_range_zoo")
            usage_parallel = usage_parallel.strip()

            docs_text += f"""
## Usage

### Parallel API
```python
{usage_parallel}
```

### AEC API
```python
{usage}
```
"""

            # Generate configuration section in documentation
            submodule_conf_path = f"free_range_zoo.envs.{env_name}.env.structures.configuration"

            submodule = importlib.import_module(submodule_conf_path)

            relavent_classes = [
                cls_name for cls_name, _ in inspect.getmembers(submodule, inspect.isclass)
                if issubclass(getattr(submodule, cls_name), submodule.Configuration) and cls_name != 'Configuration'
            ]

            docs_text += f"""
## Configuration

```{{eval-rst}}
.. currentmodule:: free_range_zoo.envs.{env_name}.env.structures.configuration

"""
            for cls_name in relavent_classes:
                docs_text += f'.. autoclass:: {cls_name}\n'

            docs_text += "\n```\n"

            docs_text += f"""
## API

```{{eval-rst}}
.. currentmodule:: free_range_zoo.envs.{env_name}.env.{env_name}

.. autoclass:: env
.. autoclass:: raw_env
```
"""

            docs_env_path = os.path.join(docs_dir, "environments", env_type, env_name, "specification.md")
            _create_docs_md(docs_env_path, docs_text, frontmatter_options)


if __name__ == "__main__":
    main()
